using Microsoft.AspNetCore.Mvc;
using TMKMiniApp.Models;
using TMKMiniApp.Models.DTOs;
using TMKMiniApp.Models.OrderModels;
using TMKMiniApp.Services;
using TMKMiniApp.Validators;
using FluentValidation;

namespace TMKMiniApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class OrdersController : ControllerBase
    {
        private readonly IOrderService _orderService;
        private readonly ILogger<OrdersController> _logger;
        private readonly OrderRequestValidator _orderRequestValidator;

        public OrdersController(IOrderService orderService, ILogger<OrdersController> logger, OrderRequestValidator orderRequestValidator)
        {
            _orderService = orderService;
            _logger = logger;
            _orderRequestValidator = orderRequestValidator;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        /// </summary>
        [HttpGet]
        public async Task<ActionResult<IEnumerable<OrderDto>>> GetAllOrders()
        {
            try
            {
                var orders = await _orderService.GetAllOrdersAsync();
                return Ok(orders);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤");
                return StatusCode(500, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        [HttpGet("user/{userId}")]
        public async Task<ActionResult<IEnumerable<OrderDto>>> GetUserOrders(long userId)
        {
            try
            {
                var orders = await _orderService.GetOrdersByUserIdAsync(userId);
                return Ok(orders);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", userId);
                return StatusCode(500, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
        /// </summary>
        [HttpGet("{id}")]
        public async Task<ActionResult<OrderDto>> GetOrder(Guid id)
        {
            try
            {
                var order = await _orderService.GetOrderByIdAsync(id);
                if (order == null)
                    return NotFound($"–ó–∞–∫–∞–∑ —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω");

                return Ok(order);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —Å ID {OrderId}", id);
                return StatusCode(500, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        /// </summary>
        [HttpPost]
        public async Task<ActionResult<OrderDto>> CreateOrder(OrderRequest orderRequest)
        {
            try
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                _logger.LogInformation("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: INN='{INN}', FirstName='{FirstName}', LastName='{LastName}', ItemsCount={ItemsCount}", 
                    orderRequest.INN, orderRequest.FirstName, orderRequest.LastName, orderRequest.OrderedItems?.Count ?? 0);
                
                if (orderRequest.OrderedItems != null && orderRequest.OrderedItems.Any())
                {
                    _logger.LogInformation("–ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: ID='{ID}', Name='{Name}', Quantity={Quantity}, Unit='{Unit}'", 
                        orderRequest.OrderedItems[0].ID, orderRequest.OrderedItems[0].Name, orderRequest.OrderedItems[0].Quantity, orderRequest.OrderedItems[0].Unit);
                }

                // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é FluentValidation
                var validationResult = await _orderRequestValidator.ValidateAsync(orderRequest);
                if (!validationResult.IsValid)
                {
                    var errors = validationResult.Errors.Select(e => new { Field = e.PropertyName, Message = e.ErrorMessage });
                    _logger.LogWarning("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ FluentValidation: {Errors}", string.Join(", ", errors.Select(e => $"{e.Field}: {e.Message}")));
                    return BadRequest(new { Message = "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", Errors = errors });
                }

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ModelState
                if (!ModelState.IsValid)
                {
                    var modelStateErrors = ModelState
                        .Where(x => x.Value.Errors.Count > 0)
                        .ToDictionary(
                            kvp => kvp.Key,
                            kvp => kvp.Value.Errors.Select(e => e.ErrorMessage).ToArray()
                        );
                    _logger.LogWarning("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ModelState: {Errors}", 
                        string.Join(", ", modelStateErrors.Select(kvp => $"{kvp.Key}: {string.Join(", ", kvp.Value)}")));
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ FluentValidation
                    var errors = modelStateErrors.Select(kvp => new { Field = kvp.Key, Message = string.Join(", ", kvp.Value) });
                    return BadRequest(new { Message = "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", Errors = errors });
                }

                var order = await _orderService.CreateOrderFromRequestAsync(orderRequest);
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                return Ok(new { success = true, orderId = order.Id });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞");
                return StatusCode(500, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        /// </summary>
        [HttpPut("{id}/status")]
        public async Task<ActionResult<OrderDto>> UpdateOrderStatus(Guid id, UpdateOrderStatusDto updateOrderStatusDto)
        {
            try
            {
                if (!ModelState.IsValid)
                    return BadRequest(ModelState);

                var order = await _orderService.UpdateOrderStatusAsync(id, updateOrderStatusDto);
                if (order == null)
                    return NotFound($"–ó–∞–∫–∞–∑ —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω");

                return Ok(order);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {OrderId}", id);
                return StatusCode(500, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        /// <summary>
        /// –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
        /// </summary>
        [HttpDelete("{id}")]
        public async Task<ActionResult> DeleteOrder(Guid id)
        {
            try
            {
                var result = await _orderService.DeleteOrderAsync(id);
                if (!result)
                    return NotFound($"–ó–∞–∫–∞–∑ —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω");

                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —Å ID {OrderId}", id);
                return StatusCode(500, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        /// </summary>
        [HttpGet("status/{status}")]
        public async Task<ActionResult<IEnumerable<OrderDto>>> GetOrdersByStatus(string status)
        {
            try
            {
                var orders = await _orderService.GetOrdersByStatusAsync(status);
                return Ok(orders);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É {Status}", status);
                return StatusCode(500, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Telegram API
        /// </summary>
        [HttpPost("test-telegram")]
        public async Task<ActionResult> TestTelegram()
        {
            try
            {
                _logger.LogInformation("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram API");
                
                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
                var testOrder = new Order
                {
                    Id = Guid.NewGuid(),
                    UserId = 999001,
                    FirstName = "–¢–µ—Å—Ç",
                    LastName = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    INN = "1234567890",
                    Phone = "+7 (999) 123-45-67",
                    Email = "test@example.com",
                    Comment = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram API",
                    Items = new List<OrderItem>
                    {
                        new OrderItem
                        {
                            Id = 1,
                            ID = "10001",
                            Name = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
                            Quantity = 1,
                            Unit = "—à—Ç",
                            Price = 1000.00m,
                            CreatedAt = DateTime.UtcNow
                        }
                    },
                    TotalPrice = 1000.00m,
                    Status = OrderStatus.Pending,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                };

                // –ü–æ–ª—É—á–∞–µ–º TelegramService –∏–∑ DI
                var telegramService = HttpContext.RequestServices.GetService<ITelegramService>();
                if (telegramService == null)
                {
                    _logger.LogError("‚ùå TelegramService –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ");
                    return StatusCode(500, "TelegramService –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
                await telegramService.SendOrderAsync(testOrder);
                
                return Ok(new { 
                    success = true, 
                    message = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram",
                    orderId = testOrder.Id
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram API");
                return StatusCode(500, new { 
                    success = false, 
                    message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram API",
                    error = ex.Message
                });
            }
        }
    }
}