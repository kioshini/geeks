using System.Text;
using System.Text.Json;
using TMKMiniApp.Models;

namespace TMKMiniApp.Services
{
    public interface ITelegramService
    {
        Task SendOrderAsync(Order order);
        Task<string> GetChatIdAsync();
    }

    public class TelegramService : ITelegramService
    {
        private readonly HttpClient _httpClient;
        private readonly IConfiguration _configuration;
        private readonly ILogger<TelegramService> _logger;
        private readonly string _botToken;
        private readonly string? _chatId;

        public TelegramService(HttpClient httpClient, IConfiguration configuration, ILogger<TelegramService> logger)
        {
            _httpClient = httpClient;
            _configuration = configuration;
            _logger = logger;
            _botToken = Environment.GetEnvironmentVariable("TELEGRAM_BOT_TOKEN") ?? _configuration["Telegram:BotToken"];
            _chatId = Environment.GetEnvironmentVariable("TELEGRAM_CHAT_ID") ?? _configuration["Telegram:ChatId"];
            
            if (string.IsNullOrEmpty(_chatId))
            {
                _logger.LogWarning("‚ö†Ô∏è  TELEGRAM CHAT_ID –ù–ï –ù–ê–°–¢–†–û–ï–ù!");
                _logger.LogWarning("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
                _logger.LogWarning("1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @your_bot_name –≤ Telegram");
                _logger.LogWarning("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
                _logger.LogWarning("3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: GET https://api.telegram.org/bot{0}/getUpdates", _botToken);
                _logger.LogWarning("4. –ù–∞–π–¥–∏—Ç–µ 'chat':{'id': –ù–£–ñ–ù–´–ô_ID} –≤ –æ—Ç–≤–µ—Ç–µ");
                _logger.LogWarning("5. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ appsettings.json –∫–∞–∫ 'Telegram:ChatId'");
            }
        }

        public async Task SendOrderAsync(Order order)
        {
            _logger.LogInformation("üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ #{OrderId} –≤ Telegram", order.Id);
            _logger.LogInformation("üîë BotToken: {BotToken}", string.IsNullOrEmpty(_botToken) ? "–ù–ï –ù–ê–°–¢–†–û–ï–ù" : "–ù–ê–°–¢–†–û–ï–ù");
            _logger.LogInformation("üí¨ ChatId: {ChatId}", string.IsNullOrEmpty(_chatId) ? "–ù–ï –ù–ê–°–¢–†–û–ï–ù" : _chatId);

            if (string.IsNullOrEmpty(_botToken))
            {
                _logger.LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑: BotToken –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                return;
            }

            if (string.IsNullOrEmpty(_chatId))
            {
                _logger.LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑: ChatId –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                return;
            }

            try
            {
                var message = FormatOrderMessage(order);
                _logger.LogInformation("üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram: {MessageLength} —Å–∏–º–≤–æ–ª–æ–≤", message.Length);
                
                await SendMessageAsync(message);
                _logger.LogInformation("‚úÖ –ó–∞–∫–∞–∑ #{OrderId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram", order.Id);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ #{OrderId} –≤ Telegram", order.Id);
            }
        }

        public async Task<string> GetChatIdAsync()
        {
            try
            {
                var url = $"https://api.telegram.org/bot{_botToken}/getUpdates";
                var response = await _httpClient.GetStringAsync(url);
                
                _logger.LogInformation("–û—Ç–≤–µ—Ç –æ—Ç Telegram API:");
                _logger.LogInformation(response);
                
                return response;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_id");
                return $"–û—à–∏–±–∫–∞: {ex.Message}";
            }
        }

        private string FormatOrderMessage(Order order)
        {
            var sb = new StringBuilder();
            
            sb.AppendLine("üì¶ **–ù–û–í–´–ô –ó–ê–ö–ê–ó**");
            sb.AppendLine($"ID: {order.Id}");
            sb.AppendLine($"–î–∞—Ç–∞: {order.CreatedAt:yyyy-MM-dd HH:mm} (UTC)");
            sb.AppendLine($"–ò–º—è: {order.FirstName} {order.LastName}");
            sb.AppendLine($"–ò–ù–ù: {order.INN}");
            sb.AppendLine($"–¢–µ–ª–µ—Ñ–æ–Ω: {order.Phone}");
            sb.AppendLine($"Email: {order.Email}");
            
            
            if (!string.IsNullOrWhiteSpace(order.Comment))
                sb.AppendLine($"\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {order.Comment}");
            
            sb.AppendLine("\n**–¢–æ–≤–∞—Ä—ã:**");
            int idx = 1;
            foreach (var item in order.Items)
            {
                var unitReadable = GetUnitDisplay(item.Unit);
                var posSum = item.Price * (decimal)item.Quantity;
                sb.AppendLine($"{idx}. {item.Name} (ID:{item.ID}) ‚Äî {item.Quantity} {unitReadable} √ó {item.Price:N2} = {posSum:N2} ‚ÇΩ");
                idx++;
            }
            
            sb.AppendLine($"\nüí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.TotalPrice:N2} ‚ÇΩ**");
            
            return sb.ToString();
        }

        private string GetUnitDisplay(string unit)
        {
            return unit switch
            {
                "m" => "–º–µ—Ç—Ä–æ–≤",
                "—Ç" => "—Ç–æ–Ω–Ω",
                "t" => "—Ç–æ–Ω–Ω",
                "–º" => "–º–µ—Ç—Ä–æ–≤",
                _ => "—à—Ç"
            };
        }

        private async Task SendMessageAsync(string message)
        {
            var url = $"https://api.telegram.org/bot{_botToken}/sendMessage";
            _logger.LogInformation("üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: {Url}", url);
            
            var payload = new
            {
                chat_id = _chatId,
                text = message,
                parse_mode = "Markdown"
            };

            var json = JsonSerializer.Serialize(payload);
            _logger.LogInformation("üì§ Payload: {Payload}", json);
            
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync(url, content);
            _logger.LogInformation("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: StatusCode={StatusCode}", response.StatusCode);
            
            var responseContent = await response.Content.ReadAsStringAsync();
            _logger.LogInformation("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {ResponseContent}", responseContent);
            
            if (!response.IsSuccessStatusCode)
            {
                _logger.LogError("‚ùå –û—à–∏–±–∫–∞ Telegram API: {StatusCode} - {ErrorContent}", response.StatusCode, responseContent);
                throw new Exception($"–û—à–∏–±–∫–∞ Telegram API: {response.StatusCode} - {responseContent}");
            }
            
            _logger.LogInformation("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
        }
    }
}
