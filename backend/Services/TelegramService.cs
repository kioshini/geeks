using System.Text;
using System.Text.Json;
using TMKMiniApp.Models;

namespace TMKMiniApp.Services
{
    public interface ITelegramService
    {
        Task SendOrderAsync(Order order);
        Task<string> GetChatIdAsync();
    }

    public class TelegramService : ITelegramService
    {
        private readonly HttpClient _httpClient;
        private readonly IConfiguration _configuration;
        private readonly ILogger<TelegramService> _logger;
        private readonly string _botToken;
        private readonly string? _chatId;

        public TelegramService(HttpClient httpClient, IConfiguration configuration, ILogger<TelegramService> logger)
        {
            _httpClient = httpClient;
            _configuration = configuration;
            _logger = logger;
            _botToken = _configuration["Telegram:BotToken"] ?? "8089111666:AAE9yHQFUR4VJP_CuDHN9rPO0mc26fVDMNs";
            _chatId = _configuration["Telegram:ChatId"];
            
            if (string.IsNullOrEmpty(_chatId))
            {
                _logger.LogWarning("‚ö†Ô∏è  TELEGRAM CHAT_ID –ù–ï –ù–ê–°–¢–†–û–ï–ù!");
                _logger.LogWarning("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
                _logger.LogWarning("1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @your_bot_name –≤ Telegram");
                _logger.LogWarning("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
                _logger.LogWarning("3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: GET https://api.telegram.org/bot{_botToken}/getUpdates");
                _logger.LogWarning("4. –ù–∞–π–¥–∏—Ç–µ 'chat':{'id': –ù–£–ñ–ù–´–ô_ID} –≤ –æ—Ç–≤–µ—Ç–µ");
                _logger.LogWarning("5. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ appsettings.json –∫–∞–∫ 'Telegram:ChatId'");
            }
        }

        public async Task SendOrderAsync(Order order)
        {
            if (string.IsNullOrEmpty(_chatId))
            {
                _logger.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑: ChatId –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                return;
            }

            try
            {
                var message = FormatOrderMessage(order);
                await SendMessageAsync(message);
                _logger.LogInformation($"–ó–∞–∫–∞–∑ #{order.Id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ #{order.Id} –≤ Telegram");
            }
        }

        public async Task<string> GetChatIdAsync()
        {
            try
            {
                var url = $"https://api.telegram.org/bot{_botToken}/getUpdates";
                var response = await _httpClient.GetStringAsync(url);
                
                _logger.LogInformation("–û—Ç–≤–µ—Ç –æ—Ç Telegram API:");
                _logger.LogInformation(response);
                
                return response;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_id");
                return $"–û—à–∏–±–∫–∞: {ex.Message}";
            }
        }

        private string FormatOrderMessage(Order order)
        {
            var sb = new StringBuilder();
            
            sb.AppendLine("üõí **–ù–û–í–´–ô –ó–ê–ö–ê–ó**");
            sb.AppendLine($"üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.Id}");
            sb.AppendLine($"üìÖ –î–∞—Ç–∞: {order.CreatedAt:dd.MM.yyyy HH:mm}");
            sb.AppendLine();
            
            sb.AppendLine("üë§ **–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:**");
            sb.AppendLine($"–ò–º—è: {order.FirstName}");
            sb.AppendLine($"–§–∞–º–∏–ª–∏—è: {order.LastName}");
            sb.AppendLine($"–ò–ù–ù: {order.Inn}");
            sb.AppendLine($"–¢–µ–ª–µ—Ñ–æ–Ω: {order.Phone}");
            sb.AppendLine($"Email: {order.Email}");
            sb.AppendLine();
            
            sb.AppendLine("üì¶ **–¢–û–í–ê–†–´:**");
            foreach (var item in order.OrderItems)
            {
                sb.AppendLine($"‚Ä¢ {item.Product?.Name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"}");
                sb.AppendLine($"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.Quantity} {GetUnitDisplay(item.Unit)}");
                sb.AppendLine($"  –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {item.Price:F2} ‚ÇΩ");
                sb.AppendLine($"  –°—É–º–º–∞: {item.TotalPrice:F2} ‚ÇΩ");
                sb.AppendLine();
            }
            
            sb.AppendLine($"üí∞ **–ò–¢–û–ì–û: {order.TotalAmount:F2} ‚ÇΩ**");
            
            return sb.ToString();
        }

        private string GetUnitDisplay(string unit)
        {
            return unit switch
            {
                "–º" => "–º–µ—Ç—Ä",
                "—Ç" => "—Ç–æ–Ω–Ω–∞",
                _ => "—à—Ç"
            };
        }

        private async Task SendMessageAsync(string message)
        {
            var url = $"https://api.telegram.org/bot{_botToken}/sendMessage";
            
            var payload = new
            {
                chat_id = _chatId,
                text = message,
                parse_mode = "Markdown"
            };

            var json = JsonSerializer.Serialize(payload);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync(url, content);
            
            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"–û—à–∏–±–∫–∞ Telegram API: {response.StatusCode} - {errorContent}");
            }
        }
    }
}
